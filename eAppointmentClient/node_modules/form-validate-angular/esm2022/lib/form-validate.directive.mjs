import { Directive, HostListener, Input } from '@angular/core';
import * as i0 from "@angular/core";
export class FormValidateDirective {
    constructor(el) {
        this.el = el;
        this.autoValidateMessage = false;
    }
    handleInputEvent(event) {
        const target = event.target;
        this.checkValidation(target);
    }
    handleSubmitEvent(event) {
        this.checkValidation();
    }
    checkValidation(target) {
        if (target) {
            this.validateElement(target);
        }
        else {
            // Form submit edildiğinde tüm form elemanlarını kontrol eder
            for (let i = 0; i < this.el.nativeElement.elements.length; i++) {
                const childElement = this.el.nativeElement.elements[i];
                this.validateElement(childElement);
            }
        }
    }
    validateElement(element) {
        if (element.validity !== undefined) {
            const elName = `[name=${element.name}] + div`;
            let divEl;
            if (element.name !== '') {
                divEl = document.querySelector(elName);
            }
            if (!element.validity.valid) {
                if (this.autoValidateMessage && divEl !== null) {
                    divEl.innerHTML = element.validationMessage;
                }
                element.classList.add('is-invalid');
            }
            else {
                element.classList.remove('is-invalid');
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.5", ngImport: i0, type: FormValidateDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.0.5", type: FormValidateDirective, isStandalone: true, selector: "[formValidate]", inputs: { autoValidateMessage: "autoValidateMessage" }, host: { listeners: { "keyup": "handleInputEvent($event)", "change": "handleInputEvent($event)", "submit": "handleSubmitEvent($event)" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.5", ngImport: i0, type: FormValidateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[formValidate]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }], propDecorators: { autoValidateMessage: [{
                type: Input,
                args: ["autoValidateMessage"]
            }], handleInputEvent: [{
                type: HostListener,
                args: ['keyup', ['$event']]
            }, {
                type: HostListener,
                args: ['change', ['$event']]
            }], handleSubmitEvent: [{
                type: HostListener,
                args: ['submit', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS12YWxpZGF0ZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9teS1saWIvc3JjL2xpYi9mb3JtLXZhbGlkYXRlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFjLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBTTNFLE1BQU0sT0FBTyxxQkFBcUI7SUFJaEMsWUFDVSxFQUErQjtRQUEvQixPQUFFLEdBQUYsRUFBRSxDQUE2QjtRQUhYLHdCQUFtQixHQUFZLEtBQUssQ0FBQztJQUkvRCxDQUFDO0lBSUwsZ0JBQWdCLENBQUMsS0FBWTtRQUMzQixNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBMEIsQ0FBQztRQUNoRCxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFHRCxpQkFBaUIsQ0FBQyxLQUFZO1FBQzVCLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRU8sZUFBZSxDQUFDLE1BQXlCO1FBQy9DLElBQUksTUFBTSxFQUFFLENBQUM7WUFDWCxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQy9CLENBQUM7YUFBTSxDQUFDO1lBQ04sNkRBQTZEO1lBQzdELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7Z0JBQy9ELE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQXFCLENBQUM7Z0JBQzNFLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDckMsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0lBRU8sZUFBZSxDQUFDLE9BQXlCO1FBQy9DLElBQUksT0FBTyxDQUFDLFFBQVEsS0FBSyxTQUFTLEVBQUUsQ0FBQztZQUNuQyxNQUFNLE1BQU0sR0FBRyxTQUFTLE9BQU8sQ0FBQyxJQUFJLFNBQVMsQ0FBQztZQUM5QyxJQUFJLEtBQVUsQ0FBQztZQUVmLElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxFQUFFLEVBQUUsQ0FBQztnQkFDeEIsS0FBSyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDekMsQ0FBQztZQUVELElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUM1QixJQUFHLElBQUksQ0FBQyxtQkFBbUIsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFDLENBQUM7b0JBQzdDLEtBQUssQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDO2dCQUM5QyxDQUFDO2dCQUVELE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3RDLENBQUM7aUJBQU0sQ0FBQztnQkFDTixPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUN6QyxDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7OEdBbkRVLHFCQUFxQjtrR0FBckIscUJBQXFCOzsyRkFBckIscUJBQXFCO2tCQUpqQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLFVBQVUsRUFBRSxJQUFJO2lCQUNqQjsrRUFHK0IsbUJBQW1CO3NCQUFoRCxLQUFLO3VCQUFDLHFCQUFxQjtnQkFRNUIsZ0JBQWdCO3NCQUZmLFlBQVk7dUJBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDOztzQkFDaEMsWUFBWTt1QkFBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUM7Z0JBT2xDLGlCQUFpQjtzQkFEaEIsWUFBWTt1QkFBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2Zvcm1WYWxpZGF0ZV0nLFxyXG4gIHN0YW5kYWxvbmU6IHRydWVcclxufSlcclxuZXhwb3J0IGNsYXNzIEZvcm1WYWxpZGF0ZURpcmVjdGl2ZSB7XHJcblxyXG4gIEBJbnB1dChcImF1dG9WYWxpZGF0ZU1lc3NhZ2VcIikgYXV0b1ZhbGlkYXRlTWVzc2FnZTogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWY8SFRNTEZvcm1FbGVtZW50PlxyXG4gICkgeyB9XHJcbiAgXHJcbiAgQEhvc3RMaXN0ZW5lcigna2V5dXAnLCBbJyRldmVudCddKVxyXG4gIEBIb3N0TGlzdGVuZXIoJ2NoYW5nZScsIFsnJGV2ZW50J10pXHJcbiAgaGFuZGxlSW5wdXRFdmVudChldmVudDogRXZlbnQpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG4gICAgdGhpcy5jaGVja1ZhbGlkYXRpb24odGFyZ2V0KTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ3N1Ym1pdCcsIFsnJGV2ZW50J10pXHJcbiAgaGFuZGxlU3VibWl0RXZlbnQoZXZlbnQ6IEV2ZW50KSB7XHJcbiAgICB0aGlzLmNoZWNrVmFsaWRhdGlvbigpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjaGVja1ZhbGlkYXRpb24odGFyZ2V0PzogSFRNTElucHV0RWxlbWVudCkge1xyXG4gICAgaWYgKHRhcmdldCkge1xyXG4gICAgICB0aGlzLnZhbGlkYXRlRWxlbWVudCh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gRm9ybSBzdWJtaXQgZWRpbGRpxJ9pbmRlIHTDvG0gZm9ybSBlbGVtYW5sYXLEsW7EsSBrb250cm9sIGVkZXJcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBjaGlsZEVsZW1lbnQgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuZWxlbWVudHNbaV0gYXMgSFRNTElucHV0RWxlbWVudDtcclxuICAgICAgICB0aGlzLnZhbGlkYXRlRWxlbWVudChjaGlsZEVsZW1lbnQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHZhbGlkYXRlRWxlbWVudChlbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50KSB7XHJcbiAgICBpZiAoZWxlbWVudC52YWxpZGl0eSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIGNvbnN0IGVsTmFtZSA9IGBbbmFtZT0ke2VsZW1lbnQubmFtZX1dICsgZGl2YDtcclxuICAgICAgbGV0IGRpdkVsOiBhbnk7XHJcblxyXG4gICAgICBpZiAoZWxlbWVudC5uYW1lICE9PSAnJykge1xyXG4gICAgICAgIGRpdkVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbE5hbWUpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIWVsZW1lbnQudmFsaWRpdHkudmFsaWQpIHtcclxuICAgICAgICBpZih0aGlzLmF1dG9WYWxpZGF0ZU1lc3NhZ2UgJiYgZGl2RWwgIT09IG51bGwpe1xyXG4gICAgICAgICAgZGl2RWwuaW5uZXJIVE1MID0gZWxlbWVudC52YWxpZGF0aW9uTWVzc2FnZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLWludmFsaWQnKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWludmFsaWQnKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufSJdfQ==